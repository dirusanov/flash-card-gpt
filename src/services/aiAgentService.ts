import { AIService } from './aiServiceFactory';
import { StoredCard } from '../store/reducers/cards';
import { Modes } from '../constants';

// –¢–∏–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã AI –∞–≥–µ–Ω—Ç–æ–≤
export interface AIAgent {
    name: string;
    role: string;
    systemPrompt: string;
    execute: (input: any, context: WorkflowContext) => Promise<any>;
}

export interface WorkflowContext {
    originalText: string;
    currentStep: string;
    previousResults: { [key: string]: any };
    metadata: {
        textLength: number;
        language: string;
        topic: string;
        complexity: 'simple' | 'medium' | 'advanced';
    };
}

export interface SupervisorDecision {
    strategy: 'single_concept' | 'multiple_concepts' | 'step_by_step' | 'comparison';
    agents: string[];
    instructions: { [agentName: string]: string };
    expectedOutput: string;
    reasoning: string;
}

export interface ContentAnalysis {
    mainTopic: string;
    keyPoints: string[];
    concepts: ConceptInfo[];
    relationships: ConceptRelationship[];
    learningObjectives: string[];
    complexity: 'simple' | 'medium' | 'advanced';
    estimatedCards: number;
}

export interface ConceptInfo {
    name: string;
    definition: string;
    importance: 'high' | 'medium' | 'low';
    prerequisites: string[];
    examples: string[];
}

export interface ConceptRelationship {
    from: string;
    to: string;
    type: 'depends_on' | 'part_of' | 'related_to' | 'contradicts';
}

export interface QuestionQuality {
    question: string;
    answer: string;
    qualityScore: number;
    relevanceScore: number;
    difficultyScore: number;
    issues: string[];
    improvements: string[];
    isWorthwhile: boolean;
    reasoning: string;
}

export interface GeneratedCard {
    front: string;
    back: string;
    tags?: string[];
    difficulty?: 'easy' | 'medium' | 'hard';
    imagePrompt?: string;
    concept?: string;
    qualityScore?: number;
}

export interface ValidationResult {
    isValid: boolean;
    overallScore: number;
    cardScores: { [index: number]: number };
    issues: string[];
    suggestions: string[];
    improvedCards?: GeneratedCard[];
    finalRecommendation: string;
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞–º–∏
export class AIAgentService {
    private aiService: AIService;
    private apiKey: string;
    private agents: { [key: string]: AIAgent };

    constructor(aiService: AIService, apiKey: string) {
        this.aiService = aiService;
        this.apiKey = apiKey;
        this.agents = this.initializeAgents();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    private initializeAgents(): { [key: string]: AIAgent } {
        return {
            supervisor: {
                name: 'Supervisor',
                role: '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–≥–µ–Ω—Ç',
                systemPrompt: `–¢—ã - Supervisor AI Agent, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫.
                –¢—ã –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∫–∞–∫.`,
                execute: this.executeSupervisor.bind(this)
            },
            contentAnalyzer: {
                name: 'Content Analyzer',
                role: '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                systemPrompt: `–¢—ã - Content Analyzer Agent, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≥–ª—É–±–æ–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏.
                –¢—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —á—Ç–æ –≤–∞–∂–Ω–æ –∏–∑—É—á–∞—Ç—å –∏ –∫–∞–∫ —ç—Ç–æ –ª—É—á—à–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.`,
                execute: this.executeContentAnalyzer.bind(this)
            },
            questionQuality: {
                name: 'Question Quality',
                role: '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤',
                systemPrompt: `–¢—ã - Question Quality Agent, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ.
                –¢—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—à—å –≥–ª—É–ø—ã–µ, –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –∏–ª–∏ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.`,
                execute: this.executeQuestionQuality.bind(this)
            },
            cardGenerator: {
                name: 'Card Generator',
                role: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫',
                systemPrompt: `–¢—ã - Card Generator Agent, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç Supervisor –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Content Analyzer.
                –¢—ã —Å–æ–∑–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`,
                execute: this.executeCardGenerator.bind(this)
            },
            validator: {
                name: 'Validator',
                role: '–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏ —É–ª—É—á—à–∞—Ç–µ–ª—å',
                systemPrompt: `–¢—ã - Validator Agent, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–∏—Ç—å –∏—Ö.
                –¢—ã —Å–ª–µ–¥–∏—à—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.`,
                execute: this.executeValidator.bind(this)
            }
        };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - orchestrator workflow
    async createCardsFromText(text: string, abortSignal?: AbortSignal): Promise<StoredCard[]> {
        try {
            console.log('üöÄ AI Agent Workflow: Starting intelligent card creation');
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç workflow
            const context: WorkflowContext = {
                originalText: text,
                currentStep: 'initialization',
                previousResults: {},
                metadata: {
                    textLength: text.length,
                    language: this.detectLanguage(text),
                    topic: '',
                    complexity: this.estimateComplexity(text)
                }
            };

            // Check if cancelled before starting
            if (abortSignal?.aborted) {
                throw new Error('AI card creation was cancelled by user');
            }

            // –®–∞–≥ 1: Supervisor –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç
            console.log('üß† Step 1: Supervisor planning');
            context.currentStep = 'supervisor_planning';
            const supervisorDecision = await this.agents.supervisor.execute(text, context);
            context.previousResults.supervisor = supervisorDecision;

            // Check if cancelled after supervisor
            if (abortSignal?.aborted) {
                throw new Error('AI card creation was cancelled by user');
            }

            // –®–∞–≥ 2: Content Analyzer –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
            console.log('üìä Step 2: Content analysis');
            context.currentStep = 'content_analysis';
            const contentAnalysis = await this.agents.contentAnalyzer.execute(text, context);
            context.previousResults.contentAnalysis = contentAnalysis;
            context.metadata.topic = contentAnalysis.mainTopic;

            // Check if cancelled after content analysis
            if (abortSignal?.aborted) {
                throw new Error('AI card creation was cancelled by user');
            }

            // –®–∞–≥ 3: Card Generator —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
            console.log('üéØ Step 3: Card generation');
            context.currentStep = 'card_generation';
            const generatedCards = await this.agents.cardGenerator.execute({
                text,
                analysis: contentAnalysis,
                instructions: supervisorDecision.instructions.cardGenerator
            }, context);
            context.previousResults.generatedCards = generatedCards;

            // Check if cancelled after card generation
            if (abortSignal?.aborted) {
                throw new Error('AI card creation was cancelled by user');
            }

            // –®–∞–≥ 4: Question Quality –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
            console.log('üîç Step 4: Question quality check');
            context.currentStep = 'quality_check';
            const qualityResults: QuestionQuality[] = [];
            for (const card of generatedCards) {
                // Check if cancelled during quality checks
                if (abortSignal?.aborted) {
                    throw new Error('AI card creation was cancelled by user');
                }
                const qualityCheck = await this.agents.questionQuality.execute(card, context);
                qualityResults.push(qualityCheck);
            }
            context.previousResults.qualityResults = qualityResults;

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            const qualityCards = generatedCards.filter((card: GeneratedCard, index: number) => 
                qualityResults[index].isWorthwhile && qualityResults[index].qualityScore >= 7
            );

            console.log(`‚úÖ Quality filter: ${qualityCards.length}/${generatedCards.length} cards passed`);

            // Check if cancelled before validation
            if (abortSignal?.aborted) {
                throw new Error('AI card creation was cancelled by user');
            }

            // –®–∞–≥ 5: Validator –ø—Ä–æ–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            console.log('üî¨ Step 5: Final validation');
            context.currentStep = 'final_validation';
            const validationResult = await this.agents.validator.execute({
                cards: qualityCards,
                originalText: text,
                context
            }, context);

            // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            const finalCards = validationResult.improvedCards || qualityCards;
            
            console.log(`üéâ Workflow completed: ${finalCards.length} high-quality cards created`);
            console.log(`üìà Overall score: ${validationResult.overallScore}/100`);

            return this.convertToStoredCards(finalCards, text);

        } catch (error) {
            console.error('‚ùå Error in AI agent workflow:', error);
            throw error;
        }
    }

    // Supervisor Agent - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    private async executeSupervisor(text: string, context: WorkflowContext): Promise<SupervisorDecision> {
        const prompt = `–¢—ã - Supervisor AI Agent. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫.

–¢–ï–ö–°–¢: "${text}"

–ö–û–ù–¢–ï–ö–°–¢:
- –î–ª–∏–Ω–∞: ${context.metadata.textLength} —Å–∏–º–≤–æ–ª–æ–≤
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${context.metadata.complexity}
- –Ø–∑—ã–∫: ${context.metadata.language}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—É—á–µ–Ω–∏—è (single_concept, multiple_concepts, step_by_step, comparison)
2. –†–µ—à–∏ –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∫–∞–∫
3. –î–∞–π —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–∂–¥–æ–º—É –∞–≥–µ–Ω—Ç—É
4. –û–ø—Ä–µ–¥–µ–ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–°–¢–†–ê–¢–ï–ì–ò–ò:
- single_concept: –æ–¥–∏–Ω –∫–ª—é—á–µ–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ç
- multiple_concepts: –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤  
- step_by_step: –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º
- comparison: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ

JSON –æ—Ç–≤–µ—Ç:
{
  "strategy": "step_by_step",
  "agents": ["contentAnalyzer", "cardGenerator", "questionQuality", "validator"],
  "instructions": {
    "contentAnalyzer": "–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "cardGenerator": "–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
    "questionQuality": "–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π",
    "validator": "–£–±–µ–¥–∏—Å—å —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—Ä–∞–∑—É—é—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è"
  },
  "expectedOutput": "–ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫—Ä—ã–≤–∞—é—â–∏—Ö –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
  "reasoning": "–¢–µ–∫—Å—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –ª—É—á—à–µ –∏–∑—É—á–∞—Ç—å –ø–æ —à–∞–≥–∞–º"
}`;

        try {
            const response = await this.aiService.createChatCompletion(this.apiKey, [
                { role: 'system', content: this.agents.supervisor.systemPrompt },
                { role: 'user', content: prompt }
            ]);

            if (!response?.content) {
                throw new Error('No response from supervisor agent');
            }

            return this.parseJSONResponse(response.content, 'supervisor');
        } catch (error) {
            console.error('Supervisor agent error:', error);
            return this.createFallbackSupervisorDecision();
        }
    }

    // Content Analyzer Agent - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
    private async executeContentAnalyzer(text: string, context: WorkflowContext): Promise<ContentAnalysis> {
        const supervisorInstructions = context.previousResults.supervisor?.instructions?.contentAnalyzer || 
            '–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';

        const prompt = `–¢—ã - Content Analyzer Agent. –ì–ª—É–±–æ–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.

–¢–ï–ö–°–¢: "${text}"

–ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ SUPERVISOR: ${supervisorInstructions}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è
2. –í—ã—è–≤–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏
3. –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
4. –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞
5. –û—Ü–µ–Ω–∏ —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω—É–∂–Ω–æ

JSON –æ—Ç–≤–µ—Ç:
{
  "mainTopic": "–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞",
  "keyPoints": ["–ø—É–Ω–∫—Ç1", "–ø—É–Ω–∫—Ç2"],
  "concepts": [
    {
      "name": "–ö–æ–Ω—Ü–µ–ø—Ç1",
      "definition": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
      "importance": "high",
      "prerequisites": ["–ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∞1"],
      "examples": ["–ø—Ä–∏–º–µ—Ä1"]
    }
  ],
  "relationships": [
    {
      "from": "–ö–æ–Ω—Ü–µ–ø—Ç1",
      "to": "–ö–æ–Ω—Ü–µ–ø—Ç2", 
      "type": "depends_on"
    }
  ],
  "learningObjectives": ["—Ü–µ–ª—å1", "—Ü–µ–ª—å2"],
  "complexity": "medium",
  "estimatedCards": 3
}`;

        try {
            const response = await this.aiService.createChatCompletion(this.apiKey, [
                { role: 'system', content: this.agents.contentAnalyzer.systemPrompt },
                { role: 'user', content: prompt }
            ]);

            if (!response?.content) {
                throw new Error('No response from content analyzer agent');
            }

            return this.parseJSONResponse(response.content, 'contentAnalyzer');
        } catch (error) {
            console.error('Content analyzer error:', error);
            return this.createFallbackContentAnalysis(text);
        }
    }

    // Card Generator Agent - —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    private async executeCardGenerator(input: any, context: WorkflowContext): Promise<GeneratedCard[]> {
        const { text, analysis, instructions } = input;

        const prompt = `–¢—ã - Card Generator Agent. –°–æ–∑–¥–∞–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.

–¢–ï–ö–°–¢: "${text}"

–ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:
- –¢–µ–º–∞: ${analysis.mainTopic}
- –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è: ${analysis.concepts.map((c: ConceptInfo) => c.name).join(', ')}
- –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è: ${analysis.learningObjectives.join(', ')}
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${analysis.complexity}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ SUPERVISOR: ${instructions}

–ü–†–ò–ù–¶–ò–ü–´ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ö–ê–†–¢–û–ß–ï–ö:
1. –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å - –æ–¥–∏–Ω –∫–æ–Ω—Ü–µ–ø—Ç
2. –ß–µ—Ç–∫–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
3. –ü–æ–ª–Ω—ã–µ, —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å
5. –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å

–°–û–ó–î–ê–ô –ö–ê–†–¢–û–ß–ö–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –í–ê–ñ–ù–û–ì–û –ö–û–ù–¶–ï–ü–¢–ê.

JSON –æ—Ç–≤–µ—Ç:
{
  "cards": [
    {
      "front": "–ß–µ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å",
      "back": "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç",
      "tags": ["—Ç–µ–≥1"],
      "difficulty": "medium",
      "concept": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç–∞"
    }
  ]
}`;

        try {
            const response = await this.aiService.createChatCompletion(this.apiKey, [
                { role: 'system', content: this.agents.cardGenerator.systemPrompt },
                { role: 'user', content: prompt }
            ]);

            if (!response?.content) {
                throw new Error('No response from card generator agent');
            }

            const result = this.parseJSONResponse(response.content, 'cardGenerator');
            return result.cards || [];
        } catch (error) {
            console.error('Card generator error:', error);
            return this.createFallbackCards(text);
        }
    }

    // Question Quality Agent - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    private async executeQuestionQuality(card: GeneratedCard, context: WorkflowContext): Promise<QuestionQuality> {
        const prompt = `–¢—ã - Question Quality Agent. –û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.

–ö–ê–†–¢–û–ß–ö–ê:
–í–æ–ø—Ä–æ—Å: "${card.front}"
–û—Ç–≤–µ—Ç: "${card.back}"
–ö–æ–Ω—Ü–µ–ø—Ç: ${card.concept || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢: "${context.originalText}"

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (0-10 –±–∞–ª–ª–æ–≤):
1. –ö–ê–ß–ï–°–¢–í–û –í–û–ü–†–û–°–ê:
   - –Ø—Å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
   - –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å
   - –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å

2. –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨:
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç—É
   - –í–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–º—ã
   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å

3. –£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò:
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
   - –ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
   - –û–±—É—á–∞—é—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª

–û–¢–ö–õ–û–ù–ò –í–û–ü–†–û–° –ï–°–õ–ò:
- –°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π/–æ—á–µ–≤–∏–¥–Ω—ã–π
- –ù–µ —Å–≤—è–∑–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º
- –ü–ª–æ—Ö–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω
- –ù–µ –Ω–µ—Å–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏

JSON –æ—Ç–≤–µ—Ç:
{
  "question": "${card.front}",
  "answer": "${card.back}",
  "qualityScore": 8,
  "relevanceScore": 9,
  "difficultyScore": 7,
  "issues": ["–ø—Ä–æ–±–ª–µ–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å"],
  "improvements": ["–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å"],
  "isWorthwhile": true,
  "reasoning": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"
}`;

        try {
            const response = await this.aiService.createChatCompletion(this.apiKey, [
                { role: 'system', content: this.agents.questionQuality.systemPrompt },
                { role: 'user', content: prompt }
            ]);

            if (!response?.content) {
                throw new Error('No response from question quality agent');
            }

            return this.parseJSONResponse(response.content, 'questionQuality');
        } catch (error) {
            console.error('Question quality error:', error);
            return this.createFallbackQualityCheck(card);
        }
    }

    // Validator Agent - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    private async executeValidator(input: any, context: WorkflowContext): Promise<ValidationResult> {
        const { cards, originalText } = input;

        const prompt = `–¢—ã - Validator Agent. –ü—Ä–æ–≤–µ–¥–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫.

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢: "${originalText}"

–ö–ê–†–¢–û–ß–ö–ò (${cards.length} —à—Ç):
${cards.map((card: GeneratedCard, i: number) => `
${i + 1}. Q: ${card.front}
   A: ${card.back}
   –ö–æ–Ω—Ü–µ–ø—Ç: ${card.concept || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
`).join('')}

–ö–û–ù–¢–ï–ö–°–¢ WORKFLOW:
- –¢–µ–º–∞: ${context.metadata.topic}
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${context.previousResults.supervisor?.strategy}

–ü–†–û–í–ï–†–¨:
1. –ü–æ–ª–Ω–æ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã (0-25 –±–∞–ª–ª–æ–≤)
2. –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ (0-25 –±–∞–ª–ª–æ–≤)  
3. –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (0-25 –±–∞–ª–ª–æ–≤)
4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (0-25 –±–∞–ª–ª–æ–≤)

–ï–°–õ–ò –û–ë–©–ò–ô –ë–ê–õ–õ < 80, –ü–†–ï–î–õ–û–ñ–ò –£–õ–£–ß–®–ï–ù–ò–Ø.

JSON –æ—Ç–≤–µ—Ç:
{
  "isValid": true,
  "overallScore": 85,
  "cardScores": {0: 85, 1: 90},
  "issues": ["–ø—Ä–æ–±–ª–µ–º–∞ –µ—Å–ª–∏ –µ—Å—Ç—å"],
  "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ1"],
  "improvedCards": [...],
  "finalRecommendation": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
}`;

        try {
            const response = await this.aiService.createChatCompletion(this.apiKey, [
                { role: 'system', content: this.agents.validator.systemPrompt },
                { role: 'user', content: prompt }
            ]);

            if (!response?.content) {
                throw new Error('No response from validator agent');
            }

            return this.parseJSONResponse(response.content, 'validator');
        } catch (error) {
            console.error('Validator error:', error);
            return this.createFallbackValidation(cards);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private detectLanguage(text: string): string {
        const russianPattern = /[–∞-—è—ë]/i;
        return russianPattern.test(text) ? 'russian' : 'english';
    }

    private estimateComplexity(text: string): 'simple' | 'medium' | 'advanced' {
        const words = text.split(/\s+/).length;
        const sentences = text.split(/[.!?]+/).length;
        const avgWordsPerSentence = words / sentences;

        if (avgWordsPerSentence < 10 && words < 100) return 'simple';
        if (avgWordsPerSentence < 20 && words < 500) return 'medium';
        return 'advanced';
    }

    private parseJSONResponse(content: string, agentName: string): any {
        try {
            const jsonMatch = content.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                throw new Error(`No JSON found in ${agentName} response`);
            }
            return JSON.parse(jsonMatch[0]);
        } catch (error) {
            console.error(`Error parsing ${agentName} response:`, error);
            throw error;
        }
    }

    // Fallback –º–µ—Ç–æ–¥—ã
    private createFallbackSupervisorDecision(): SupervisorDecision {
        return {
            strategy: 'multiple_concepts',
            agents: ['contentAnalyzer', 'cardGenerator', 'questionQuality', 'validator'],
            instructions: {
                contentAnalyzer: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –≤ —Ç–µ–∫—Å—Ç–µ',
                cardGenerator: '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π',
                questionQuality: '–ü—Ä–æ–≤–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞',
                validator: '–ü—Ä–æ–≤–µ–¥–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É'
            },
            expectedOutput: '–ù–∞–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫',
            reasoning: 'Fallback strategy - general approach'
        };
    }

    private createFallbackContentAnalysis(text: string): ContentAnalysis {
        return {
            mainTopic: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            keyPoints: [text.substring(0, 100)],
            concepts: [{
                name: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ü–µ–ø—Ç',
                definition: text.substring(0, 200),
                importance: 'medium',
                prerequisites: [],
                examples: []
            }],
            relationships: [],
            learningObjectives: ['–ü–æ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é'],
            complexity: 'medium',
            estimatedCards: 2
        };
    }

    private createFallbackCards(text: string): GeneratedCard[] {
        return [{
            front: 'What is discussed in this text?',
            back: text.substring(0, 200) + (text.length > 200 ? '...' : ''),
            difficulty: 'medium',
            concept: 'Main idea'
        }];
    }

    private createFallbackQualityCheck(card: GeneratedCard): QuestionQuality {
        return {
            question: card.front,
            answer: card.back,
            qualityScore: 7,
            relevanceScore: 7,
            difficultyScore: 7,
            issues: [],
            improvements: [],
            isWorthwhile: true,
            reasoning: 'Fallback quality check - acceptable card'
        };
    }

    private createFallbackValidation(cards: GeneratedCard[]): ValidationResult {
        return {
            isValid: true,
            overallScore: 75,
            cardScores: cards.reduce((acc, _, i) => ({ ...acc, [i]: 75 }), {}),
            issues: [],
            suggestions: [],
            finalRecommendation: 'Cards passed basic validation'
        };
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ StoredCard
    private convertToStoredCards(cards: GeneratedCard[], originalText: string): StoredCard[] {
        return cards.map((card, index) => ({
            id: `ai_agent_${Date.now()}_${index}_${Math.random().toString(36).substr(2, 9)}`,
            mode: Modes.GeneralTopic,
            front: card.front,
            back: card.back,
            text: originalText,
            createdAt: new Date(),
            exportStatus: 'not_exported' as const,
            ...(card.tags && { tags: card.tags }),
            ...(card.difficulty && { difficulty: card.difficulty }),
            ...(card.concept && { concept: card.concept }),
            ...(card.qualityScore && { qualityScore: card.qualityScore })
        }));
    }
}

// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI Agent Service
export const createAIAgentService = (aiService: AIService, apiKey: string): AIAgentService => {
    return new AIAgentService(aiService, apiKey);
};