/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –≤ —Ç–µ–∫—Å—Ç–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ LaTeX
 */

import { getAIService } from './aiServiceFactory';
import { ModelProvider } from '../store/reducers/settings';

export interface FormulaDetectionResult {
    originalText: string;
    processedText: string;
    formulasDetected: number;
    formulas: Array<{
        original: string;
        latex: string;
        position: { start: number; end: number };
        confidence: number;
    }>;
}

/**
 * AI –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 */
const FORMULA_DETECTION_PROMPT = `
Analyze the following text and identify mathematical expressions, equations, formulas, or mathematical notation. 
Convert them to proper LaTeX format for beautiful rendering.

Rules:
1. Identify mathematical expressions including:
   - Equations (like x^2 + y^2 = z^2)
   - Mathematical functions (sin, cos, log, etc.)
   - Fractions, integrals, summations
   - Greek letters (alpha, beta, pi, etc.)
   - Mathematical symbols (‚àë, ‚à´, ‚àö, ¬±, ‚â•, ‚â§, etc.)
   - Exponents and subscripts
   - Mathematical constants (pi, e, infinity)

2. Convert to LaTeX:
   - Use $$formula$$ for display math (block formulas)
   - Use $formula$ for inline math
   - Proper LaTeX syntax (\\frac{}{}, \\sqrt{}, \\int, \\sum, etc.)

3. Preserve the original text structure
4. Only wrap actual mathematical content

5. Return ONLY the processed text with formulas converted to LaTeX.
   Do not add explanations or comments.

Text to analyze:
`;

/**
 * –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
const MATH_PATTERNS = [
    // –£—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (–≤–∫–ª—é—á–∞—è Unicode)
    /[a-zA-ZùëÜùëùùëéùëèùëêùë•ùë¶ùëß]\s*[\+\-\*\/\=]\s*[a-zA-Z0-9ùëÜùëùùëéùëèùëê]/g,
    // –°—Ç–µ–ø–µ–Ω–∏ (x^2, x¬≤)
    /[a-zA-Z0-9ùëÜùëùùëéùëèùëê]\^[0-9]+|[a-zA-Z0-9ùëÜùëùùëéùëèùëê][¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ]/g,
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    /\b(sin|cos|tan|log|ln|exp|sqrt|abs|max|min|lim)\s*\(/g,
    // –î—Ä–æ–±–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    /\b\d+\/\d+\b/g,
    // –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –≤ —Ç–µ–∫—Å—Ç–µ
    /\b(alpha|beta|gamma|delta|epsilon|pi|sigma|theta|omega|mu|lambda)\b/gi,
    // Unicode –≥—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
    /[œÄŒ±ùõºŒ≤ùõΩŒ≥ùõæŒ¥ùõøŒ∏ùúÉŒªùúÜŒºùúáœÉùúéœÜùúëœâùúî]/g,
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã (–≤–∫–ª—é—á–∞—è Unicode)
    /[¬±‚àë‚à´‚àö‚àû‚â§‚â•‚â†‚âà‚àÇ‚àá¬∑]/g,
    // Unicode –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    /[ùëÜùëùùëéùëèùëêùë•ùë¶ùëßùê¥ùêµùê∂]/g,
    // –§–æ—Ä–º—É–ª—ã —Å –∫—Ä—É–≥–ª—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–≤–∫–ª—é—á–∞—è Unicode)
    /\([a-zA-Z0-9ùëÜùëùùëéùëèùëê\+\-\*\/\^\s]+\)\s*[\=\+\-\*\/]/g,
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã –ì–µ—Ä–æ–Ω–∞
    /[ùëÜS]\s*=\s*[ùëùp]\s*\([ùëùp]\s*[-‚àí]\s*[ùëéa]\)/g,
];

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
 */
const containsMathContent = (text: string): boolean => {
    return MATH_PATTERNS.some(pattern => pattern.test(text));
};

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
const RUSSIAN_MATH_KEYWORDS = [
    '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ñ–æ—Ä–º—É–ª–∞', '–∏–Ω—Ç–µ–≥—Ä–∞–ª', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', '—Ñ—É–Ω–∫—Ü–∏—è',
    '—Ç–µ–æ—Ä–µ–º–∞', '–ª–µ–º–º–∞', '–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–≤—ã—á–∏—Å–ª–∏—Ç—å', '–Ω–∞–π—Ç–∏',
    '–∫–æ—Ä–µ–Ω—å', '—Å—Ç–µ–ø–µ–Ω—å', '–ª–æ–≥–∞—Ä–∏—Ñ–º', '—Å–∏–Ω—É—Å', '–∫–æ—Å–∏–Ω—É—Å', '—Ç–∞–Ω–≥–µ–Ω—Å',
    '–ø—Ä–µ–¥–µ–ª', '—Å—É–º–º–∞', '–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', '–º–∞—Ç—Ä–∏—Ü–∞', '–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å',
    '–ø–ª–æ—â–∞–¥—å', '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', '–ø–µ—Ä–∏–º–µ—Ç—Ä', '–¥–ª–∏–Ω–∞', '—Å—Ç–æ—Ä–æ–Ω–∞',
    '–≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞', '–∫–∞—Ç–µ—Ç', '—Ä–∞–¥–∏—É—Å', '–¥–∏–∞–º–µ—Ç—Ä', '–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å'
];

const containsRussianMathKeywords = (text: string): boolean => {
    const lowerText = text.toLowerCase();
    return RUSSIAN_MATH_KEYWORDS.some(keyword => lowerText.includes(keyword));
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª
 */
export const detectAndConvertFormulas = async (
    text: string,
    useAI: boolean = true
): Promise<FormulaDetectionResult> => {
    const result: FormulaDetectionResult = {
        originalText: text,
        processedText: text,
        formulasDetected: 0,
        formulas: []
    };

    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (!containsMathContent(text) && !containsRussianMathKeywords(text)) {
        return result;
    }

    try {
        if (useAI) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª
            const prompt = `${FORMULA_DETECTION_PROMPT}\n\n"${text}"`;
            // –ü–æ–ª—É—á–∞–µ–º AI —Å–µ—Ä–≤–∏—Å (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–Ω–µ)
            const aiService = getAIService(ModelProvider.OpenAI); // –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const processedText = await aiService.translateText(prompt, 'en');
            
            if (processedText && processedText !== text) {
                result.processedText = processedText;
                result.formulasDetected = countFormulasInText(processedText);
                result.formulas = extractFormulasInfo(text, processedText);
            }
        } else {
            // –§–æ–ª–ª–±—ç–∫ - –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ-–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            result.processedText = applySimpleFormulaRules(text);
            result.formulasDetected = countFormulasInText(result.processedText);
        }
    } catch (error) {
        console.warn('Formula detection AI failed, using fallback:', error);
        result.processedText = applySimpleFormulaRules(text);
        result.formulasDetected = countFormulasInText(result.processedText);
    }

    return result;
};

/**
 * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–º—É–ª –≤ —Ç–µ–∫—Å—Ç–µ
 */
const countFormulasInText = (text: string): number => {
    const blockFormulas = (text.match(/\$\$[^$]+\$\$/g) || []).length;
    const inlineFormulas = (text.match(/(?<!\$)\$[^$\n]+\$(?!\$)/g) || []).length;
    return blockFormulas + inlineFormulas;
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º—É–ª–∞—Ö
 */
const extractFormulasInfo = (originalText: string, processedText: string) => {
    const formulas: any[] = [];
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ LaTeX —Ñ–æ—Ä–º—É–ª—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    const allFormulas = [
        ...Array.from(processedText.matchAll(/\$\$([^$]+)\$\$/g)),
        ...Array.from(processedText.matchAll(/(?<!\$)\$([^$\n]+)\$(?!\$)/g))
    ];
    
    allFormulas.forEach((match, index) => {
        formulas.push({
            original: match[0],
            latex: match[1],
            position: { start: match.index || 0, end: (match.index || 0) + match[0].length },
            confidence: 0.8 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        });
    });
    
    return formulas;
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Unicode –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
 */
const convertUnicodeMathToASCII = (text: string): string => {
    let convertedText = text;
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Unicode —Å–∏–º–≤–æ–ª—ã –≤ –æ–±—ã—á–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
    const unicodeMathMap: { [key: string]: string } = {
        // Mathematical Alphanumeric Symbols
        'ùëÜ': 'S',  // Mathematical Italic Capital S
        'ùëù': 'p',  // Mathematical Italic Small p  
        'ùëé': 'a',  // Mathematical Italic Small a
        'ùëè': 'b',  // Mathematical Italic Small b
        'ùëê': 'c',  // Mathematical Italic Small c
        'ùë•': 'x',  // Mathematical Italic Small x
        'ùë¶': 'y',  // Mathematical Italic Small y
        'ùëß': 'z',  // Mathematical Italic Small z
        'ùê¥': 'A',  // Mathematical Bold Capital A
        'ùêµ': 'B',  // Mathematical Bold Capital B
        'ùê∂': 'C',  // Mathematical Bold Capital C
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        'ùíÆ': 'S',  // Mathematical Script Capital S
        'ùíë': 'p',  // Mathematical Script Small p
        // –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
        'œÄ': 'pi',
        'Œ±': 'alpha',
        'Œ≤': 'beta',
        'Œ≥': 'gamma',
        'Œ¥': 'delta',
        'Œ∏': 'theta',
        'Œª': 'lambda',
        'Œº': 'mu',
        'œÉ': 'sigma',
        'œÜ': 'phi',
        'œâ': 'omega'
    };
    
    // –ó–∞–º–µ–Ω—è–µ–º Unicode —Å–∏–º–≤–æ–ª—ã
    Object.entries(unicodeMathMap).forEach(([unicode, ascii]) => {
        const regex = new RegExp(unicode, 'g');
        convertedText = convertedText.replace(regex, ascii);
    });
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ —Ñ–æ—Ä–º—É–ª—ã
    convertedText = convertedText.replace(/([a-zA-Z])\s+([=+\-*/()])/g, '$1$2');
    convertedText = convertedText.replace(/([=+\-*/(])\s+([a-zA-Z])/g, '$1$2');
    
    return convertedText;
};

/**
 * –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 */
const applySimpleFormulaRules = (text: string): string => {
    let processedText = text;
    
    // –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Unicode –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    processedText = convertUnicodeMathToASCII(processedText);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    
    // –§–æ—Ä–º—É–ª—ã —Ç–∏–ø–∞ p = (a + b + c) / 2 –∏–ª–∏ s = (a + b + c) / 2
    processedText = processedText.replace(/([psPS])\s*=\s*\(([^)]+)\)\s*\/\s*(\d+)/g, '$$$$1 = \\frac{$2}{$3}$$');
    
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä–∞
    processedText = processedText.replace(/–ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä\s+([psPS])\s+—Ä–∞–≤–µ–Ω\s+–ø–æ–ª–æ–≤–∏–Ω–µ\s+—Å—É–º–º—ã\s+—Å—Ç–æ—Ä–æ–Ω[:\s]*([psPS])\s*=\s*\(([^)]+)\)\s*\/\s*(\d+)/gi, 
        '–ü–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä $1 —Ä–∞–≤–µ–Ω –ø–æ–ª–æ–≤–∏–Ω–µ —Å—É–º–º—ã —Å—Ç–æ—Ä–æ–Ω: $$$$2 = \\frac{$3}{$4}$$');
    
    // S = sqrt(s * (s-a) * (s-b) * (s-c)) - —Ñ–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞
    processedText = processedText.replace(/([Ss–ü–ª–æ—â–∞–¥—å]*)\s*=\s*sqrt\s*\(([^)]+)\)/gi, '$$$$1 = \\sqrt{$2}$$');
    
    // x^2 -> $x^2$  
    processedText = processedText.replace(/\b([a-zA-Z])\^([0-9]+)\b/g, '$$$$1^{$2}$$');
    
    // a^2 + b^2 = c^2
    processedText = processedText.replace(/\b([a-zA-Z])\^(\d+)\s*\+\s*([a-zA-Z])\^(\d+)\s*=\s*([a-zA-Z])\^(\d+)\b/g, '$$$$1^{$2} + $3^{$4} = $5^{$6}$$');
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const russianGreek: { [key: string]: string } = {
        '–∞–ª—å—Ñ–∞': '\\alpha', '–±–µ—Ç–∞': '\\beta', '–≥–∞–º–º–∞': '\\gamma', '–¥–µ–ª—å—Ç–∞': '\\delta',
        '—ç–ø—Å–∏–ª–æ–Ω': '\\epsilon', '–ø–∏': '\\pi', '—Å–∏–≥–º–∞': '\\sigma', '—Ç–µ—Ç–∞': '\\theta',
        '–æ–º–µ–≥–∞': '\\omega', '–º—é': '\\mu', '–ª—è–º–±–¥–∞': '\\lambda', '—Ñ–∏': '\\phi'
    };
    
    Object.entries(russianGreek).forEach(([word, latex]) => {
        const regex = new RegExp(`\\b${word}\\b`, 'gi');
        processedText = processedText.replace(regex, `$${latex}$`);
    });
    
    // –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    const greekReplacements: { [key: string]: string } = {
        'alpha': '\\alpha', 'beta': '\\beta', 'gamma': '\\gamma', 'delta': '\\delta',
        'epsilon': '\\epsilon', 'pi': '\\pi', 'sigma': '\\sigma', 'theta': '\\theta',
        'omega': '\\omega', 'mu': '\\mu', 'lambda': '\\lambda', 'phi': '\\phi'
    };
    
    Object.entries(greekReplacements).forEach(([word, latex]) => {
        const regex = new RegExp(`\\b${word}\\b`, 'gi');
        processedText = processedText.replace(regex, `$${latex}$`);
    });
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    processedText = processedText.replace(/\b(sin|cos|tan|log|ln)\s*\(([^)]+)\)/g, '$\\\\$1($2)$');
    
    // –î—Ä–æ–±–∏ a/b -> \frac{a}{b}
    processedText = processedText.replace(/\b(\w+)\s*\/\s*(\w+)\b/g, '$\\frac{$1}{$2}$');
    
    // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å 
    processedText = processedText.replace(/sqrt\s*\(([^)]+)\)/gi, '$\\sqrt{$1}$');
    processedText = processedText.replace(/–∫–æ—Ä–µ–Ω—å\s+–∏–∑\s+(\w+)/gi, '$\\sqrt{$1}$');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª—ã –ì–µ—Ä–æ–Ω–∞ —Å Unicode —Å–∏–º–≤–æ–ª–æ–º –∫–æ—Ä–Ω—è
    processedText = processedText.replace(/‚àö\s*([^,.\s]+)/g, '\\sqrt{$1}');
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª—ã –ì–µ—Ä–æ–Ω–∞: S = ‚àöp(p-a)(p-b)(p-c)
    processedText = processedText.replace(
        /S\s*=\s*‚àö?\s*p\s*\(?\s*p\s*[-‚àí]\s*a\s*\)?\s*\(?\s*p\s*[-‚àí]\s*b\s*\)?\s*\(?\s*p\s*[-‚àí]\s*c\s*\)?/gi,
        '$$S = \\sqrt{p(p-a)(p-b)(p-c)}$$'
    );
    
    // –§–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞ —Å —è–≤–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
    processedText = processedText.replace(
        /S\s*=\s*‚àö?\s*p\s*\(\s*p\s*[-‚àí]\s*a\s*\)\s*\(\s*p\s*[-‚àí]\s*b\s*\)\s*\(\s*p\s*[-‚àí]\s*c\s*\)/gi,
        '$$S = \\sqrt{p(p-a)(p-b)(p-c)}$$'
    );
    
    // –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    processedText = processedText.replace(/\(([a-zA-Z])\s*[-‚àí]\s*([a-zA-Z])\)/g, '($1 - $2)');
    
    return processedText;
};

/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
 */
export const shouldUseAIForFormulas = (text: string): boolean => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–∂–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    return containsMathContent(text) || 
           containsRussianMathKeywords(text) || 
           text.length > 50; // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞
};

/**
 * –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
export const quickFormulaPreview = (text: string): string => {
    return applySimpleFormulaRules(text);
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const forceFormulaDetection = (text: string): string => {
    console.log('üîç Force formula detection for:', text);
    
    let processedText = text;
    
    // –û–ë–†–ê–ë–û–¢–ö–ê UNICODE –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–ò–ú–í–û–õ–û–í
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Unicode –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    processedText = convertUnicodeMathToASCII(processedText);
    console.log('üî§ After Unicode conversion:', processedText);
    
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–û–õ–û–ú–ê–ù–ù–´–ï –§–û–†–ú–£–õ–´ –°–ù–ê–ß–ê–õ–ê
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º $$1 = \frac{(a + b + c)}{2}$ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
    processedText = processedText.replace(/\$\$1\s*=\s*\\frac\{?\(?(a\s*\+\s*b\s*\+\s*c)\)?\}?\{?2\}?\$*/g, 
        '$$p = \\frac{a + b + c}{2}$$');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Ç–∏–ø–∞ $$1 = \sqrt{p ¬∑ (p ‚àí a}$
    processedText = processedText.replace(/\$\$1\s*=\s*\\sqrt\{[^}]*$/g, 
        '$$S = \\sqrt{p \\cdot (p - a) \\cdot (p - b) \\cdot (p - c)}$$');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    processedText = processedText.replace(/¬∑/g, '\\cdot');
    processedText = processedText.replace(/‚àí/g, '-');
    
    // –û–°–ù–û–í–ù–´–ï –ü–†–ê–í–ò–õ–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø
    
    // –ü–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä p —Ä–∞–≤–µ–Ω –ø–æ–ª–æ–≤–∏–Ω–µ —Å—É–º–º—ã —Å—Ç–æ—Ä–æ–Ω
    processedText = processedText.replace(
        /–ø–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä\s+([pP])\s+—Ä–∞–≤–µ–Ω\s+–ø–æ–ª–æ–≤–∏–Ω–µ\s+—Å—É–º–º—ã\s+—Å—Ç–æ—Ä–æ–Ω[:\s]*\$?\$?1?\s*=\s*\\?frac\{?\(?(a\s*\+\s*b\s*\+\s*c)\)?\}?\{?2\}?\$?/gi,
        '–ü–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä $1 —Ä–∞–≤–µ–Ω –ø–æ–ª–æ–≤–∏–Ω–µ —Å—É–º–º—ã —Å—Ç–æ—Ä–æ–Ω: $$p = \\frac{a + b + c}{2}$$'
    );
    
    // –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É–ª—É –ì–µ—Ä–æ–Ω–∞  
    processedText = processedText.replace(
        /–≤—ã—Ä–æ–∂–µ–Ω–∏–µ\s+–ø–ª–æ—â–∞–¥–∏\s+—Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è\s+—á–µ—Ä–µ–∑\s+–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ[^:]*:\s*\$\$1\s*=\s*\\sqrt\{[^}]*\$*/gi,
        '–í—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: $$S = \\sqrt{p \\cdot (p - a) \\cdot (p - b) \\cdot (p - c)}$$'
    );
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    processedText = applySimpleFormulaRules(processedText);
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–†–ê–í–ò–õ–ê
    
    // –§–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å
    processedText = processedText.replace(
        /—Ñ–æÃÅ?—Ä–º—É–ª–∞\s+–≥–µ—Ä–æ–Ω–∞[^:]*:\s*S\s*=\s*p\s*\(\s*p\s*[-‚àí]\s*a\s*\)\s*\(\s*p\s*[-‚àí]\s*b\s*\)\s*\(\s*p\s*[-‚àí]\s*c\s*\)\s*,?/gi,
        '–§–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞: $$S = \\sqrt{p(p-a)(p-b)(p-c)}$$,'
    );
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
    processedText = processedText.replace(
        /S\s*=\s*p\s*\(\s*p\s*[-‚àí]\s*a\s*\)\s*\(\s*p\s*[-‚àí]\s*b\s*\)\s*\(\s*p\s*[-‚àí]\s*c\s*\)\s*,?\s*/gi,
        '$$S = \\sqrt{p(p-a)(p-b)(p-c)}$$'
    );
    
    // –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞
    processedText = processedText.replace(/—Ç–µ–æ—Ä–µ–º–∞\s+–ø–∏—Ñ–∞–≥–æ—Ä–∞[:\s]*([^.!?]*)/gi, 
        '–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: $$a^2 + b^2 = c^2$$');
    
    // –ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–µ—Ä–æ–Ω–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)
    if (!processedText.includes('\\sqrt{p(p-a)(p-b)(p-c)}') && !processedText.includes('\\sqrt{p \\cdot (p - a)')) {
        processedText = processedText.replace(/S\s*=\s*\\?sqrt\s*\{?([^}]*)\}?/gi, '$$S = \\sqrt{$1}$$');
    }
    
    console.log('‚úÖ Processed result:', processedText);
    return processedText;
};
