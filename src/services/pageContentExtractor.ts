import { PageContentContext, PageImage, FormulaElement, CodeBlock, LinkElement, PageMetadata } from './aiAgentService';

export class PageContentExtractor {
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
     */
    static extractPageContent(selectedText: string, selectionElement?: Element): PageContentContext {
        const pageImages = this.extractImages(selectedText, selectionElement);
        const formulas = this.extractFormulas(selectedText, selectionElement);
        const codeBlocks = this.extractCodeBlocks(selectedText, selectionElement);
        const links = this.extractLinks(selectedText, selectionElement);
        const metadata = this.extractMetadata();

        return {
            selectedText,
            pageImages,
            formulas,
            codeBlocks,
            links,
            metadata
        };
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    static async extractPageContentAsync(selectedText: string, selectionElement?: Element): Promise<PageContentContext> {
        console.log('üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        const pageImages = await this.extractImagesAsync(selectedText, selectionElement);
        const formulas = this.extractFormulas(selectedText, selectionElement);
        const codeBlocks = this.extractCodeBlocks(selectedText, selectionElement);
        const links = this.extractLinks(selectedText, selectionElement);
        const metadata = this.extractMetadata();

        console.log('üìÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
            images: pageImages.length,
            formulas: formulas.length,
            codeBlocks: codeBlocks.length,
            links: links.length
        });

        return {
            selectedText,
            pageImages,
            formulas,
            codeBlocks,
            links,
            metadata
        };
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    private static extractImages(selectedText: string, selectionElement?: Element): PageImage[] {
        const images: PageImage[] = [];
        const imgElements = document.querySelectorAll('img');
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${imgElements.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
        
        imgElements.forEach((img, index) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∏–∫–æ–Ω–∫–∏)
            if (img.width < 30 || img.height < 30) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index}: ${img.width}x${img.height}`);
                return;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ src –∏–ª–∏ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ data URLs
            if (!img.src) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index}: –Ω–µ—Ç src`);
                return;
            }
            
            if (img.src.startsWith('data:image') && img.src.length > 5000) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index}: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π data URL`);
                return;
            }
            
            const isNearText = this.isElementNearSelection(img, selectionElement, selectedText);
            const relevanceScore = this.calculateImageRelevance(img, selectedText, isNearText);
            
            console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index}:`, {
                src: img.src.substring(0, 50) + '...',
                alt: img.alt,
                size: `${img.width}x${img.height}`,
                isNearText,
                relevanceScore,
                willInclude: relevanceScore > 0.1  // –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥!
            });
            
            // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 0.1 –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (relevanceScore > 0.1) {
                const base64 = this.convertImageToBase64(img);
                images.push({
                    src: img.src,
                    alt: img.alt || img.title || '',
                    title: img.title,
                    width: img.naturalWidth || img.width,
                    height: img.naturalHeight || img.height,
                    isNearText,
                    relevanceScore,
                    base64
                });
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index} (score: ${relevanceScore})`);
            } else {
                console.log(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index} –Ω–µ –ø—Ä–æ—à–ª–æ –ø–æ—Ä–æ–≥ (score: ${relevanceScore})`);
            }
        });

        // –¢–∞–∫–∂–µ –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SVG
        const svgElements = document.querySelectorAll('svg');
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${svgElements.length} SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        
        svgElements.forEach((svg, index) => {
            const width = svg.width.baseVal?.value || 0;
            const height = svg.height.baseVal?.value || 0;
            if (width < 30 || height < 30) {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π SVG ${index}: ${width}x${height}`);
                return;
            }
            
            const isNearText = this.isElementNearSelection(svg, selectionElement, selectedText);
            const relevanceScore = this.calculateSvgRelevance(svg, selectedText, isNearText);
            
            console.log(`üé® SVG ${index}:`, {
                size: `${width}x${height}`,
                isNearText,
                relevanceScore,
                willInclude: relevanceScore > 0.1
            });
            
            if (relevanceScore > 0.1) {  // –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –∏ –¥–ª—è SVG
                images.push({
                    src: this.svgToDataUrl(svg),
                    alt: svg.getAttribute('aria-label') || svg.getAttribute('title') || 'SVG –¥–∏–∞–≥—Ä–∞–º–º–∞',
                    width: width || 200,
                    height: height || 200,
                    isNearText,
                    relevanceScore,
                    base64: this.svgToDataUrl(svg)
                });
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω SVG ${index} (score: ${relevanceScore})`);
            }
        });

        let finalImages = images.sort((a, b) => b.relevanceScore - a.relevanceScore).slice(0, 10);  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        // –ê–í–ê–†–ò–ô–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –±–µ—Ä–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
        if (finalImages.length === 0) {
            console.log('üö® –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –ª–æ–≥–∏–∫—É');
            const allImages: PageImage[] = [];
            
            imgElements.forEach((img, index) => {
                // –ë–µ—Ä–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ 30px
                if (img.width >= 30 && img.height >= 30 && img.src) {
                    const base64 = this.convertImageToBase64(img);
                    allImages.push({
                        src: img.src,
                        alt: img.alt || img.title || `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`,
                        title: img.title,
                        width: img.naturalWidth || img.width,
                        height: img.naturalHeight || img.height,
                        isNearText: false,
                        relevanceScore: 0.5, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
                        base64
                    });
                }
            });
            
            finalImages = allImages.slice(0, 5); // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 5 –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            console.log(`üéØ –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –î–æ–±–∞–≤–ª–µ–Ω–æ ${finalImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        }
        
        console.log(`üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${finalImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ${images.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
        
        return finalImages;
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    private static async extractImagesAsync(selectedText: string, selectionElement?: Element): Promise<PageImage[]> {
        const images: PageImage[] = [];
        const imgElements = document.querySelectorAll('img');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        const imagePromises = Array.from(imgElements).map(async (img) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (img.width < 50 || img.height < 50) return null;
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ src
            if (!img.src || (img.src.startsWith('data:image') && img.src.length > 1000)) return null;
            
            const isNearText = this.isElementNearSelection(img, selectionElement, selectedText);
            const relevanceScore = this.calculateImageRelevance(img, selectedText, isNearText);
            
            // –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (relevanceScore <= 0.3) return null;

            let base64: string | undefined;
            
            // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            if (img.src.startsWith('http') && !img.src.includes(window.location.origin)) {
                console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–Ω–µ—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.src);
                base64 = await this.fetchImageAsBase64(img.src);
            } else {
                // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                base64 = this.convertImageToBase64(img);
            }

            return {
                src: img.src,
                alt: img.alt || img.title || '',
                title: img.title,
                width: img.naturalWidth || img.width,
                height: img.naturalHeight || img.height,
                isNearText,
                relevanceScore,
                base64
            };
        });

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
        const resolvedImages = await Promise.all(imagePromises);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º null —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        resolvedImages.forEach(img => {
            if (img) images.push(img);
        });
        
        // –¢–∞–∫–∂–µ –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ SVG (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        const svgElements = document.querySelectorAll('svg');
        svgElements.forEach((svg) => {
            const width = svg.width.baseVal?.value || 0;
            const height = svg.height.baseVal?.value || 0;
            if (width < 50 || height < 50) return;
            
            const isNearText = this.isElementNearSelection(svg, selectionElement, selectedText);
            const relevanceScore = this.calculateSvgRelevance(svg, selectedText, isNearText);
            
            if (relevanceScore > 0.3) {
                images.push({
                    src: this.svgToDataUrl(svg),
                    alt: svg.getAttribute('aria-label') || svg.getAttribute('title') || 'SVG –¥–∏–∞–≥—Ä–∞–º–º–∞',
                    width: width || 200,
                    height: height || 200,
                    isNearText,
                    relevanceScore,
                    base64: this.svgToDataUrl(svg) // SVG —É–∂–µ –≤ base64 —Ñ–æ—Ä–º–∞—Ç–µ
                });
            }
        });

        console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${images.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è ${images.filter(img => img.base64).length} —Å base64)`);
        
        return images.sort((a, b) => b.relevanceScore - a.relevanceScore).slice(0, 5);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
     */
    private static extractFormulas(selectedText: string, selectionElement?: Element): FormulaElement[] {
        const formulas: FormulaElement[] = [];
        
        // MathJax —Ñ–æ—Ä–º—É–ª—ã
        const mathJaxElements = document.querySelectorAll('.MathJax, .math, [class*="math"]');
        mathJaxElements.forEach(element => {
            const formula = this.extractFormulaText(element);
            if (formula) {
                const isNearText = this.isElementNearSelection(element, selectionElement, selectedText);
                formulas.push({
                    text: formula,
                    type: this.detectFormulaType(element),
                    isNearText,
                    relevanceScore: this.calculateFormulaRelevance(formula, selectedText, isNearText)
                });
            }
        });

        // LaTeX —Ñ–æ—Ä–º—É–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
        const latexPatterns = [
            /\$\$([^$]+)\$\$/g,  // –±–ª–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
            /\$([^$]+)\$/g,      // –∏–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º—É–ª—ã
            /\\begin\{[^}]+\}[\s\S]*?\\end\{[^}]+\}/g,  // –±–ª–æ–∫–∏ LaTeX
        ];

        const textContent = document.body.textContent || '';
        latexPatterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(textContent)) !== null) {
                const formula = match[1] || match[0];
                const isNearText = textContent.toLowerCase().includes(selectedText.toLowerCase());
                formulas.push({
                    text: formula,
                    type: pattern === latexPatterns[0] ? 'block' : 'inline',
                    isNearText,
                    relevanceScore: this.calculateFormulaRelevance(formula, selectedText, isNearText)
                });
            }
        });

        return formulas
            .filter(f => f.relevanceScore > 0.2)
            .sort((a, b) => b.relevanceScore - a.relevanceScore)
            .slice(0, 3);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞
     */
    private static extractCodeBlocks(selectedText: string, selectionElement?: Element): CodeBlock[] {
        const codeBlocks: CodeBlock[] = [];
        
        // –ë–ª–æ–∫–∏ –∫–æ–¥–∞
        const codeElements = document.querySelectorAll('pre code, .highlight code, .code-block, .codehilite');
        codeElements.forEach(element => {
            const code = element.textContent?.trim();
            if (code && code.length > 10 && code.length < 2000) {
                const isNearText = this.isElementNearSelection(element, selectionElement, selectedText);
                const language = this.detectCodeLanguage(element);
                
                codeBlocks.push({
                    code,
                    language,
                    isNearText,
                    relevanceScore: this.calculateCodeRelevance(code, selectedText, isNearText)
                });
            }
        });

        // –ò–Ω–ª–∞–π–Ω –∫–æ–¥
        const inlineCodeElements = document.querySelectorAll('code:not(pre code)');
        inlineCodeElements.forEach(element => {
            const code = element.textContent?.trim();
            if (code && code.length > 3 && code.length < 100) {
                const isNearText = this.isElementNearSelection(element, selectionElement, selectedText);
                
                codeBlocks.push({
                    code,
                    language: 'inline',
                    isNearText,
                    relevanceScore: this.calculateCodeRelevance(code, selectedText, isNearText)
                });
            }
        });

        return codeBlocks
            .filter(cb => cb.relevanceScore > 0.3)
            .sort((a, b) => b.relevanceScore - a.relevanceScore)
            .slice(0, 5);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏
     */
    private static extractLinks(selectedText: string, selectionElement?: Element): LinkElement[] {
        const links: LinkElement[] = [];
        const linkElements = document.querySelectorAll('a[href]');
        
        linkElements.forEach(link => {
            const href = link.getAttribute('href');
            const text = link.textContent?.trim();
            
            if (href && text && href.startsWith('http')) {
                const isNearText = this.isElementNearSelection(link, selectionElement, selectedText);
                const relevanceScore = this.calculateLinkRelevance(text, href, selectedText, isNearText);
                
                if (relevanceScore > 0.2) {
                    links.push({
                        url: href,
                        text,
                        isNearText,
                        relevanceScore
                    });
                }
            }
        });

        return links
            .sort((a, b) => b.relevanceScore - a.relevanceScore)
            .slice(0, 3);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    private static extractMetadata(): PageMetadata {
        return {
            url: window.location.href,
            title: document.title,
            domain: window.location.hostname,
            language: document.documentElement.lang || 'en',
            hasImages: document.querySelectorAll('img').length > 0,
            hasFormulas: document.querySelectorAll('.MathJax, .math, [class*="math"]').length > 0 ||
                        (document.body.textContent || '').includes('$'),
            hasCode: document.querySelectorAll('pre code, .highlight, .code-block').length > 0
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private static isElementNearSelection(element: Element, selectionElement?: Element, selectedText?: string): boolean {
        if (!selectionElement) {
            // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            const elementText = element.textContent || '';
            const parentText = element.parentElement?.textContent || '';
            return elementText.toLowerCase().includes((selectedText || '').toLowerCase()) ||
                   parentText.toLowerCase().includes((selectedText || '').toLowerCase());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const elementRect = element.getBoundingClientRect();
        const selectionRect = selectionElement.getBoundingClientRect();
        
        const distance = Math.sqrt(
            Math.pow(elementRect.left - selectionRect.left, 2) +
            Math.pow(elementRect.top - selectionRect.top, 2)
        );
        
        return distance < 500; // 500px —Å—á–∏—Ç–∞–µ—Ç—Å—è "—Ä—è–¥–æ–º"
    }

    private static calculateImageRelevance(img: HTMLImageElement, selectedText: string, isNearText: boolean): number {
        let score = 0.3; // –°—Ç–∞—Ä—Ç—É–µ–º —Å –±–∞–∑–æ–≤—ã–º –±–∞–ª–ª–æ–º 0.3 –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        // –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ç–µ–∫—Å—Ç—É
        if (isNearText) score += 0.4;
        
        // –ë–æ–Ω—É—Å –∑–∞ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π alt —Ç–µ–∫—Å—Ç
        const alt = (img.alt || '').toLowerCase();
        const text = selectedText.toLowerCase();
        
        if (alt.includes(text) || text.includes(alt)) score += 0.3;
        
        // –ë–æ–ª–µ–µ –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        const width = img.naturalWidth || img.width;
        const height = img.naturalHeight || img.height;
        
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç 50px –∏ –≤—ã—à–µ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–∂–Ω–∏—Ö 200px)
        if (width >= 50 && height >= 50) {
            score += 0.2;
        }
        
        // –¢–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
        if (alt.includes('icon') || alt.includes('logo') || width < 50 || height < 50) {
            score -= 0.2; // –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ç—Ä–∞—Ñ
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        if (alt.includes('diagram') || alt.includes('chart') || alt.includes('graph') || 
            alt.includes('figure') || alt.includes('—Å—Ö–µ–º–∞') || alt.includes('–¥–∏–∞–≥—Ä–∞–º–º–∞') ||
            alt.includes('—Ä–∏—Å—É–Ω–æ–∫') || alt.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')) {
            score += 0.3;
        }
        
        console.log(`üìä Relevance calculation for image:`, {
            alt: alt.substring(0, 30),
            size: `${width}x${height}`,
            isNearText,
            finalScore: Math.max(0, Math.min(1, score))
        });
        
        return Math.max(0, Math.min(1, score));
    }

    private static calculateSvgRelevance(svg: SVGElement, selectedText: string, isNearText: boolean): number {
        let score = 0;
        
        if (isNearText) score += 0.5;
        
        // SVG –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã, —á—Ç–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        score += 0.3;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ SVG
        const svgText = svg.textContent || '';
        if (svgText.toLowerCase().includes(selectedText.toLowerCase()) || 
            selectedText.toLowerCase().includes(svgText.toLowerCase())) {
            score += 0.2;
        }
        
        return Math.max(0, Math.min(1, score));
    }

    private static calculateFormulaRelevance(formula: string, selectedText: string, isNearText: boolean): number {
        let score = 0;
        
        if (isNearText) score += 0.4;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—â–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        const mathTerms = selectedText.toLowerCase().match(/\b(—Ñ–æ—Ä–º—É–ª–∞|—É—Ä–∞–≤–Ω–µ–Ω–∏–µ|—Ñ—É–Ω–∫—Ü–∏—è|–∏–Ω—Ç–µ–≥—Ä–∞–ª|–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è|–º–∞—Ç—Ä–∏—Ü–∞|–≤–µ–∫—Ç–æ—Ä|–ª–æ–≥–∞—Ä–∏—Ñ–º|—Å–∏–Ω—É—Å|–∫–æ—Å–∏–Ω—É—Å|—Ç–∞–Ω–≥–µ–Ω—Å|–ø—Ä–µ–¥–µ–ª|—Å—É–º–º–∞|–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)\b/g);
        if (mathTerms && mathTerms.length > 0) score += 0.4;
        
        // –î–ª–∏–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ
        if (formula.length > 20) score += 0.2;
        
        return Math.max(0, Math.min(1, score));
    }

    private static calculateCodeRelevance(code: string, selectedText: string, isNearText: boolean): number {
        let score = 0;
        
        if (isNearText) score += 0.4;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        const progTerms = selectedText.toLowerCase().match(/\b(–∞–ª–≥–æ—Ä–∏—Ç–º|—Ñ—É–Ω–∫—Ü–∏—è|–º–µ—Ç–æ–¥|–∫–ª–∞—Å—Å|–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è|–º–∞—Å—Å–∏–≤|—Ü–∏–∫–ª|—É—Å–ª–æ–≤–∏–µ|–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–º–∞|—Å–∫—Ä–∏–ø—Ç)\b/g);
        if (progTerms && progTerms.length > 0) score += 0.4;
        
        // –•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å
        if (code.includes('\n') && code.includes('{') && code.includes('}')) score += 0.2;
        
        return Math.max(0, Math.min(1, score));
    }

    private static calculateLinkRelevance(linkText: string, href: string, selectedText: string, isNearText: boolean): number {
        let score = 0;
        
        if (isNearText) score += 0.3;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å—Å—ã–ª–∫–∏
        if (linkText.toLowerCase().includes(selectedText.toLowerCase()) || 
            selectedText.toLowerCase().includes(linkText.toLowerCase())) {
            score += 0.4;
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        if (href.includes('wikipedia') || href.includes('edu') || href.includes('documentation')) {
            score += 0.3;
        }
        
        return Math.max(0, Math.min(1, score));
    }

    private static convertImageToBase64(img: HTMLImageElement): string | undefined {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            if (!img.complete || img.naturalWidth === 0) {
                console.warn('Image not loaded yet:', img.src);
                return undefined;
            }

            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            if (!ctx) return undefined;
            
            canvas.width = img.naturalWidth || img.width;
            canvas.height = img.naturalHeight || img.height;
            
            // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
            ctx.drawImage(img, 0, 0);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º –∏ —Å—Ö–µ–º
            return canvas.toDataURL('image/png', 1.0);
        } catch (error) {
            console.warn('Could not convert image to base64:', error);
            return undefined;
        }
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
    private static async fetchImageAsBase64(url: string): Promise<string | undefined> {
        try {
            console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–Ω–µ—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', url);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const img = new Image();
            img.crossOrigin = 'anonymous'; // –î–ª—è CORS
            
            return new Promise((resolve) => {
                img.onload = () => {
                    try {
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');
                        if (!ctx) {
                            resolve(undefined);
                            return;
                        }
                        
                        canvas.width = img.naturalWidth;
                        canvas.height = img.naturalHeight;
                        
                        // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                        ctx.fillStyle = '#FFFFFF';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        
                        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞
                        ctx.drawImage(img, 0, 0);
                        
                        const base64 = canvas.toDataURL('image/png', 1.0);
                        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64');
                        resolve(base64);
                    } catch (error) {
                        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                        resolve(undefined);
                    }
                };
                
                img.onerror = () => {
                    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', url);
                    resolve(undefined);
                };
                
                img.src = url;
            });
        } catch (error) {
            console.warn('Failed to fetch image as base64:', error);
            return undefined;
        }
    }

    private static svgToDataUrl(svg: SVGElement): string {
        const svgData = new XMLSerializer().serializeToString(svg);
        return `data:image/svg+xml;base64,${btoa(svgData)}`;
    }

    private static extractFormulaText(element: Element): string | null {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã
        const mathml = element.querySelector('math');
        if (mathml) {
            return mathml.textContent || mathml.innerHTML;
        }
        
        const latex = element.getAttribute('data-latex') || 
                     element.getAttribute('data-math') ||
                     element.textContent;
        
        return latex || null;
    }

    private static detectFormulaType(element: Element): 'latex' | 'mathml' | 'inline' | 'block' {
        if (element.querySelector('math')) return 'mathml';
        
        const className = element.className.toLowerCase();
        if (className.includes('display') || className.includes('block')) return 'block';
        if (className.includes('inline')) return 'inline';
        
        return 'latex';
    }

    private static detectCodeLanguage(element: Element): string | undefined {
        // –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
        const className = element.className;
        const langMatch = className.match(/language-(\w+)|lang-(\w+)|highlight-(\w+)/);
        if (langMatch) {
            return langMatch[1] || langMatch[2] || langMatch[3];
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º
        const dataLang = element.getAttribute('data-lang') || 
                         element.getAttribute('data-language');
        if (dataLang) return dataLang;
        
        // –ü—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        const code = element.textContent || '';
        if (code.includes('function') && code.includes('{')) return 'javascript';
        if (code.includes('def ') && code.includes(':')) return 'python';
        if (code.includes('#include') || code.includes('int main')) return 'cpp';
        if (code.includes('public class') || code.includes('System.out')) return 'java';
        
        return undefined;
    }
} 