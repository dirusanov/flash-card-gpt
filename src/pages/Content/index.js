import { printLine } from './modules/print';
import React, { useState, useEffect } from 'react';
import { createRoot } from 'react-dom/client';
import App from '../../App';
import { Provider } from 'react-redux';
import { instantiateStore } from '../../store';

console.log('Content script works!');
console.log('Must reload extension for modifications to take effect.');

printLine("Using the 'printLine' function from the Print Module");

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
const newDiv = document.createElement('div');
newDiv.id = 'sidebar';
newDiv.setAttribute('style', `
  all: initial;
  position: fixed;
  top: 0;
  right: 0;
  width: 350px;
  height: 100%;
  overflow: auto;
  z-index: 9999;
  background-color: #ffffff;
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.15);
  transform: translateX(100%); /* –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–æ */
  transition: transform 0.3s ease-in-out;
`);

// –°–æ–∑–¥–∞–µ–º Shadow DOM –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
const shadow = newDiv.attachShadow({ mode: "open" });
const linkElem = document.createElement("link");
linkElem.setAttribute("rel", "stylesheet");
const linkUrl = chrome.runtime.getURL("tailwind.css");
linkElem.setAttribute("href", linkUrl);
shadow.appendChild(linkElem);

document.body.appendChild(newDiv);

const root = createRoot(shadow);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–∞–¥–µ—Ä–∞
const LoadingSpinner = () => {
  return React.createElement('div', {
    style: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      height: '100vh',
      background: 'linear-gradient(135deg, #2563EB 0%, #1D4ED8 100%)',
      fontFamily: 'system-ui, -apple-system, sans-serif',
      color: '#ffffff'
    }
  }, [
    // –õ–æ–≥–æ—Ç–∏–ø/–∏–∫–æ–Ω–∫–∞
    React.createElement('div', {
      key: 'logo',
      style: {
        width: '48px',
        height: '48px',
        background: 'rgba(255,255,255,0.2)',
        borderRadius: '12px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        marginBottom: '24px',
        animation: 'pulse 2s ease-in-out infinite'
      }
    }, 'üß†'),
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
    React.createElement('div', {
      key: 'spinner',
      style: {
        width: '32px',
        height: '32px',
        border: '2px solid rgba(255,255,255,0.3)',
        borderTop: '2px solid #ffffff',
        borderRadius: '50%',
        animation: 'spin 1s linear infinite',
        marginBottom: '20px'
      }
    }),
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    React.createElement('h2', {
      key: 'title',
      style: {
        color: '#ffffff',
        fontSize: '20px',
        fontWeight: '700',
        marginBottom: '8px',
        textAlign: 'center',
        letterSpacing: '-0.025em'
      }
    }, 'Anki Flash Cards'),
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    React.createElement('p', {
      key: 'subtitle',
      style: {
        color: 'rgba(255,255,255,0.8)',
        fontSize: '14px',
        textAlign: 'center',
        fontWeight: '400'
      }
    }, 'Initializing your learning assistant...'),
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    React.createElement('div', {
      key: 'progress-bar',
      style: {
        width: '200px',
        height: '2px',
        backgroundColor: 'rgba(255,255,255,0.3)',
        borderRadius: '1px',
        marginTop: '24px',
        overflow: 'hidden'
      }
    }, React.createElement('div', {
      style: {
        width: '100%',
        height: '100%',
        backgroundColor: '#ffffff',
        animation: 'progressBar 2s ease-in-out infinite'
      }
    })),
    // CSS –∞–Ω–∏–º–∞—Ü–∏–∏
    React.createElement('style', {
      key: 'styles'
    }, `
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      @keyframes pulse {
        0%, 100% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.05); opacity: 0.8; }
      }
      @keyframes progressBar {
        0% { transform: translateX(-100%); }
        50% { transform: translateX(0%); }
        100% { transform: translateX(100%); }
      }
    `)
  ]);
};

// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∞–π–¥–±–∞—Ä–∞
class SidebarStateManager {
  constructor() {
    this.storageKeys = {
      globalState: 'sidebar_global_state',
      tabPrefix: 'sidebar_tab_'
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  getTabKey(tabId) {
    return `${this.storageKeys.tabPrefix}${tabId}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º lastActive —Ä–µ–∂–∏–º
  async getInheritanceSettings() {
    return {
      enabled: true,
      mode: 'lastActive'
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  async getGlobalState() {
    return new Promise((resolve) => {
      chrome.storage.local.get([this.storageKeys.globalState], (result) => {
        const defaultGlobal = {
          isVisible: false,
          lastActiveTabId: null,
          lastToggleTime: Date.now()
        };
        resolve(result[this.storageKeys.globalState] || defaultGlobal);
      });
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  async getTabState(tabId) {
    const tabKey = this.getTabKey(tabId);
    return new Promise((resolve) => {
      chrome.storage.local.get([tabKey], (result) => {
        resolve(result[tabKey] || null);
      });
    });
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  async saveGlobalState(globalState) {
    return new Promise((resolve) => {
      chrome.storage.local.set({
        [this.storageKeys.globalState]: globalState
      }, resolve);
    });
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
  async saveTabState(tabId, tabState) {
    const tabKey = this.getTabKey(tabId);
    return new Promise((resolve) => {
      chrome.storage.local.set({
        [tabKey]: tabState
      }, resolve);
    });
  }

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ - –≤—Å–µ–≥–¥–∞ –Ω–∞—Å–ª–µ–¥—É–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π
  async determineInitialState(tabId) {
    const globalState = await this.getGlobalState();
    
    // –ù–∞—Å–ª–µ–¥—É–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    if (globalState.lastActiveTabId) {
      const lastActiveState = await this.getTabState(globalState.lastActiveTabId);
      if (lastActiveState) {
        return {
          isVisible: lastActiveState.isVisible,
          source: 'lastActive',
          inheritedFrom: globalState.lastActiveTabId
        };
      }
    }
    
    // –§–æ–ª–±—ç–∫ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return {
      isVisible: globalState.isVisible,
      source: 'global_fallback',
      inheritedFrom: null
    };
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
  async toggleSidebar(tabId) {
    const existingTabState = await this.getTabState(tabId);
    const globalState = await this.getGlobalState();
    
    let currentVisibility;
    if (existingTabState) {
      currentVisibility = existingTabState.isVisible;
    } else {
      // –î–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const initialState = await this.determineInitialState(tabId);
      currentVisibility = initialState.isVisible;
    }

    const newVisibility = !currentVisibility;
    const currentTime = Date.now();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
    const newTabState = {
      isVisible: newVisibility,
      lastToggleTime: currentTime,
      ...(existingTabState?.inheritedFrom && { inheritedFrom: existingTabState.inheritedFrom })
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const newGlobalState = {
      ...globalState,
      isVisible: newVisibility,
      lastActiveTabId: tabId,
      lastToggleTime: currentTime
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await Promise.all([
      this.saveTabState(tabId, newTabState),
      this.saveGlobalState(newGlobalState)
    ]);

    return { isVisible: newVisibility, wasInherited: !!existingTabState?.inheritedFrom };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
  async getCurrentState(tabId) {
    const existingTabState = await this.getTabState(tabId);
    
    if (existingTabState) {
      return { 
        isVisible: existingTabState.isVisible, 
        source: 'existing',
        inheritedFrom: existingTabState.inheritedFrom
      };
    }

    // –î–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    return await this.determineInitialState(tabId);
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const sidebarManager = new SidebarStateManager();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ DOM
const applySidebarState = (isVisible, tabId, source = 'unknown') => {
  if (isVisible) {
    newDiv.style.transform = 'translateX(0)';
    document.body.style.marginRight = '350px';
  } else {
    newDiv.style.transform = 'translateX(100%)';
    document.body.style.marginRight = '0';
  }
  
  console.log(`Sidebar state applied for tab ${tabId}: ${isVisible ? 'visible' : 'hidden'} (source: ${source})`);
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const StoreInitializer = () => {
  const [store, setStore] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [tabId, setTabId] = useState(null);

  useEffect(() => {
    const initializeStoreWithTabId = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º tab ID –æ—Ç background script
        chrome.runtime.sendMessage({ action: 'getTabId' }, async (response) => {
          const currentTabId = response?.tabId || Math.floor(Math.random() * 1000000);
          setTabId(currentTabId);
          console.log('Content script initialized with tab ID:', currentTabId);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
          try {
            const stateInfo = await sidebarManager.getCurrentState(currentTabId);
            applySidebarState(stateInfo.isVisible, currentTabId, stateInfo.source);
            
            if (stateInfo.inheritedFrom) {
              console.log(`Sidebar state inherited from tab ${stateInfo.inheritedFrom}`);
            }
          } catch (error) {
            console.error('Error determining initial sidebar state:', error);
            applySidebarState(false, currentTabId, 'error_fallback');
          }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º store
        const resolvedStore = await instantiateStore();
        setStore(resolvedStore);
        
        // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        setTimeout(() => setIsLoading(false), 100);
      } catch (error) {
        console.error('Error loading state from Chrome storage:', error);
        setIsLoading(false);
      }
    };

    initializeStoreWithTabId();
  }, []);

  if (isLoading || !store || tabId === null) {
    return React.createElement(LoadingSpinner);
  }

  return (
    <Provider store={store}>
      <App tabId={tabId} />
    </Provider>
  );
};

// –†–µ–Ω–¥–µ—Ä–∏–º React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const popup = React.createElement(StoreInitializer, {});
root.render(popup);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'toggleSidebar') {
    const currentTabId = message.tabId || 'unknown';
    
    if (currentTabId === 'unknown') {
      console.error('Cannot toggle sidebar: unknown tab ID');
      sendResponse({ 
        status: 'error', 
        message: 'Unknown tab ID' 
      });
      return true;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    sidebarManager.toggleSidebar(currentTabId)
      .then((result) => {
        applySidebarState(result.isVisible, currentTabId, 'toggle');
        
        sendResponse({ 
          status: 'Sidebar toggled', 
          visible: result.isVisible, 
          tabId: currentTabId,
          wasInherited: result.wasInherited
        });
        
        console.log(`Sidebar toggled for tab ${currentTabId}: ${result.isVisible ? 'visible' : 'hidden'}${result.wasInherited ? ' (was inherited)' : ''}`);
      })
      .catch((error) => {
        console.error('Error toggling sidebar:', error);
        sendResponse({ 
          status: 'error', 
          message: error.toString() 
        });
      });

    return true; // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è sendResponse
  }
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ StoreInitializer
