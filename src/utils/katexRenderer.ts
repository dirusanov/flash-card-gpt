/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª —Å –ø–æ–º–æ—â—å—é KaTeX
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É KaTeX –∏–∑ CDN –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ bundle
 */

// –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ KaTeX
let katexLoaded = false;
let katexPromise: Promise<any> | null = null;

/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç KaTeX –∏–∑ CDN
 */
const loadKaTeX = async (): Promise<any> => {
    if (katexLoaded) {
        return (window as any).katex;
    }
    
    if (katexPromise) {
        return katexPromise;
    }
    
    katexPromise = new Promise((resolve, reject) => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS
        const cssLink = document.createElement('link');
        cssLink.rel = 'stylesheet';
        cssLink.href = 'https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css';
        document.head.appendChild(cssLink);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º JS
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js';
        script.onload = () => {
            katexLoaded = true;
            resolve((window as any).katex);
        };
        script.onerror = () => {
            reject(new Error('Failed to load KaTeX from CDN'));
        };
        document.head.appendChild(script);
    });
    
    return katexPromise;
};

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç LaTeX —Ñ–æ—Ä–º—É–ª—É –≤ HTML —Å –ø–æ–º–æ—â—å—é KaTeX
 * @param formula - LaTeX —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 * @param displayMode - true –¥–ª—è –±–ª–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª ($$), false –¥–ª—è inline —Ñ–æ—Ä–º—É–ª ($)
 * @returns HTML —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π
 */
export const renderLatexFormula = async (formula: string, displayMode: boolean = false): Promise<string> => {
    try {
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É–ª—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        const cleanFormula = formula.trim();
        
        if (!cleanFormula) {
            return '';
        }

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å KaTeX
            console.log('üéØ Loading KaTeX for formula:', cleanFormula);
            const katex = await loadKaTeX();
            console.log('‚úÖ KaTeX loaded successfully');
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É–ª—É —Å –ø–æ–º–æ—â—å—é KaTeX
            const renderedHtml = katex.renderToString(cleanFormula, {
                displayMode: displayMode,
                throwOnError: false, // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫–∏, –∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                errorColor: '#cc0000',
                strict: false, // –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                trust: false, // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                macros: {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    "\\R": "\\mathbb{R}",
                    "\\N": "\\mathbb{N}",
                    "\\Z": "\\mathbb{Z}",
                    "\\Q": "\\mathbb{Q}",
                    "\\C": "\\mathbb{C}",
                }
            });

            console.log('üé® KaTeX rendered formula successfully:', renderedHtml.substring(0, 100) + '...');
            
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ div —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–∏–ª—è–º–∏
            if (displayMode) {
                return `<div style="text-align: center; margin: 12px 0; padding: 8px; background: #F8FAFC; border-radius: 6px;">${renderedHtml}</div>`;
            } else {
                return `<span style="margin: 0 2px;">${renderedHtml}</span>`;
            }
        } catch (katexError) {
            console.warn('‚ùå KaTeX loading failed, falling back to simple display:', katexError);
            // –§–æ–ª–ª–±—ç–∫ - –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
            if (displayMode) {
                return `<div style="text-align: center; margin: 12px 0; padding: 8px; background: #FEF2F2; border-radius: 6px; color: #DC2626; font-family: serif;">
                    <strong>–§–æ—Ä–º—É–ª–∞:</strong> ${cleanFormula}
                </div>`;
            } else {
                return `<code style="background: #FEF2F2; color: #DC2626; padding: 2px 4px; border-radius: 3px; font-family: serif;">$${cleanFormula}$</code>`;
            }
        }
    } catch (error) {
        console.warn('Formula rendering error:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (displayMode) {
            return `<div style="text-align: center; margin: 12px 0; padding: 8px; background: #FEF2F2; border-radius: 6px; color: #DC2626; font-family: serif;">
                <strong>–§–æ—Ä–º—É–ª–∞:</strong> ${formula}
            </div>`;
        } else {
            return `<code style="background: #FEF2F2; color: #DC2626; padding: 2px 4px; border-radius: 3px; font-family: serif;">$${formula}$</code>`;
        }
    }
};

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±–µ–∑ KaTeX)
 */
export const renderLatexFormulaSync = (formula: string, displayMode: boolean = false): string => {
    const cleanFormula = formula.trim();
    
    if (!cleanFormula) {
        return '';
    }

    if (displayMode) {
        return `<div style="text-align: center; margin: 12px 0; padding: 8px; background: #F8FAFC; border-radius: 6px; color: #374151; font-family: serif;">
            <strong>–§–æ—Ä–º—É–ª–∞:</strong> ${cleanFormula}
        </div>`;
    } else {
        return `<code style="background: #F3F4F6; color: #374151; padding: 2px 4px; border-radius: 3px; font-family: serif;">$${cleanFormula}$</code>`;
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç LaTeX —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ HTML
 * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å LaTeX —Ñ–æ—Ä–º—É–ª–∞–º–∏
 * @returns HTML —Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
 */
export const processLatexInContent = (content: string): string => {
    let processedContent = content;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã ($$...$$)
    processedContent = processedContent.replace(/\$\$([^$]+)\$\$/g, (match, formula) => {
        return renderLatexFormulaSync(formula, true);
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline —Ñ–æ—Ä–º—É–ª—ã ($...$), –Ω–æ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–ª–æ—á–Ω—ã–µ
    processedContent = processedContent.replace(/(?<!\$)\$([^$\n]+)\$(?!\$)/g, (match, formula) => {
        return renderLatexFormulaSync(formula, false);
    });
    
    return processedContent;
};

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ KaTeX
 * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å LaTeX —Ñ–æ—Ä–º—É–ª–∞–º–∏
 * @returns Promise —Å HTML —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
 */
export const processLatexInContentAsync = async (content: string): Promise<string> => {
    let processedContent = content;
    
    // –ù–∞–π–¥–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
    const blockFormulas = Array.from(processedContent.matchAll(/\$\$([^$]+)\$\$/g));
    const inlineFormulas = Array.from(processedContent.matchAll(/(?<!\$)\$([^$\n]+)\$(?!\$)/g));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    for (const match of blockFormulas) {
        const rendered = await renderLatexFormula(match[1], true);
        processedContent = processedContent.replace(match[0], rendered);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline —Ñ–æ—Ä–º—É–ª—ã
    for (const match of inlineFormulas) {
        const rendered = await renderLatexFormula(match[1], false);
        processedContent = processedContent.replace(match[0], rendered);
    }
    
    return processedContent;
};