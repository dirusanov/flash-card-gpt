/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª —Å –ø–æ–º–æ—â—å—é KaTeX
 * –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º KaTeX —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–∞–Ω–¥–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º CSP/–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
 */

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ KaTeX –∏ —Å—Ç–∏–ª–µ–π (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–µ–∑ CDN)
import katexModule from 'katex';
import 'katex/dist/katex.min.css';

// –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ KaTeX
let katexLoaded = false;
let katexPromise: Promise<any> | null = null;

/**
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç KaTeX –∏–∑ CDN
 */
const loadKaTeX = async (): Promise<any> => {
    if (katexLoaded) {
        return (window as any).katex;
    }
    if (katexPromise) {
        return katexPromise;
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å, –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –ø—Ä–∏ —Å–±–æ—Ä–∫–µ
    try {
        const katex = (katexModule as any) || (window as any).katex;
        (window as any).katex = katex;
        katexLoaded = true;
        return katex;
    } catch (e) {
        console.warn('KaTeX static import failed:', e);
        // –í –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω—ë–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª sync fallback
        throw e;
    }
};

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç LaTeX —Ñ–æ—Ä–º—É–ª—É –≤ HTML —Å –ø–æ–º–æ—â—å—é KaTeX
 * @param formula - LaTeX —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 * @param displayMode - true –¥–ª—è –±–ª–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª ($$), false –¥–ª—è inline —Ñ–æ—Ä–º—É–ª ($)
 * @returns HTML —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π
 */
export const renderLatexFormula = async (formula: string, displayMode: boolean = false): Promise<string> => {
    try {
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É–ª—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        const cleanFormula = formula.trim();
        
        if (!cleanFormula) {
            return '';
        }

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å KaTeX
            // console.log('üéØ Loading KaTeX for formula:', cleanFormula);
            const katex = await loadKaTeX();
            // console.log('‚úÖ KaTeX loaded successfully');
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É–ª—É —Å –ø–æ–º–æ—â—å—é KaTeX
            const renderedHtml = katex.renderToString(cleanFormula, {
                displayMode: displayMode,
                throwOnError: false,
                errorColor: '#cc0000',
                strict: 'ignore',
                trust: false,
                macros: {
                    "\\R": "\\mathbb{R}",
                    "\\N": "\\mathbb{N}",
                    "\\Z": "\\mathbb{Z}",
                    "\\Q": "\\mathbb{Q}",
                    "\\C": "\\mathbb{C}",
                }
            });

            if (displayMode) {
                return `<div class="katex-display">${renderedHtml}</div>`;
            } else {
                return `<span class="katex-inline">${renderedHtml}</span>`;
            }
        } catch (katexError) {
            console.warn('‚ùå KaTeX loading/render failed, falling back to simple display:', katexError);
            // –§–æ–ª–ª–±—ç–∫ ‚Äî –±–æ–ª–µ–µ –º—è–≥–∫–∏–π —Å—Ç–∏–ª—å –±–µ–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
            if (displayMode) {
                return `<div style="text-align: center; margin: 12px 0; padding: 10px; background: #F1F5F9; border-radius: 6px; font-family: 'Times New Roman', serif;">${cleanFormula}</div>`;
            } else {
                return `<span style="background: #F1F5F9; padding: 2px 4px; border-radius: 3px; font-family: 'Times New Roman', serif;">${cleanFormula}</span>`;
            }
        }
    } catch (error) {
        console.warn('Formula rendering error:', error);
        if (displayMode) {
            return `<div style="text-align: center; margin: 12px 0; padding: 10px; background: #F1F5F9; border-radius: 6px; font-family: 'Times New Roman', serif;">${formula}</div>`;
        } else {
            return `<span style="background: #F1F5F9; padding: 2px 4px; border-radius: 3px; font-family: 'Times New Roman', serif;">${formula}</span>`;
        }
    }
};

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±–µ–∑ KaTeX)
 */
export const renderLatexFormulaSync = (formula: string, displayMode: boolean = false): string => {
    const cleanFormula = formula.trim();

    if (!cleanFormula) {
        return '';
    }

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –±–µ–∑ KaTeX
    if (displayMode) {
        return `<div style="text-align: center; margin: 16px 0; padding: 12px 16px; background: linear-gradient(135deg, #F8FAFC 0%, #E2E8F0 100%); border: 1px solid #CBD5E1; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
            <div style="font-family: 'Times New Roman', serif; font-size: 16px; color: #1E293B; font-weight: 500; letter-spacing: 0.5px;">
                ${cleanFormula}
            </div>
        </div>`;
    } else {
        return `<span style="display: inline-block; margin: 0 4px; padding: 4px 8px; background: linear-gradient(135deg, #F1F5F9 0%, #E2E8F0 100%); border: 1px solid #CBD5E1; border-radius: 6px; font-family: 'Times New Roman', serif; font-size: 14px; color: #334155; font-weight: 500; box-shadow: 0 1px 2px rgba(0,0,0,0.05);">
            ${cleanFormula}
        </span>`;
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç LaTeX —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ HTML
 * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å LaTeX —Ñ–æ—Ä–º—É–ª–∞–º–∏
 * @returns HTML —Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
 */
export const processLatexInContent = (content: string): string => {
    let processedContent = content;

    // 0) –ë–∞–∑–æ–≤–∞—è —Å–∞–Ω–∞—Ü–∏—è –º—É—Å–æ—Ä–∞ MathML/–Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    processedContent = basicMathSanitize(processedContent);
    processedContent = normalizeLatexMarkers(processedContent);

    // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–¥–∞—É–Ω-–ø–æ–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –±–µ–∑ $ –≤ –±–ª–æ—á–Ω—ã–µ $$..$$ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    processedContent = processedContent.replace(/(^|\n)\s*(–§–æ—Ä–º—É–ª–∞:)?\s*g\s*=\s*([^\n<]+)(?=\n|$)/gi, (m, p1, lead, eq) => {
        const normalized = eq.trim()
            .replace(/\^(\d+)/g, '^{$1}')
            .replace(/¬∑/g, '\\cdot')
            .replace(/\|/g, ' \\mid ');
        return `${p1}$$g = ${normalized}$$`;
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    processedContent = processedContent.replace(/\$\$([^$]+)\$\$/g, (match, formula) => {
        return renderLatexFormulaSync(formula, true);
    });

    // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫–æ—Ä—Ç–µ–∂–∏/–≤–µ–∫—Ç–æ—Ä—ã –±–µ–∑ $ ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ inline $...$
    processedContent = processedContent.replace(/\(([^()]+)\)/g, (match, inner, offset, whole) => {
        // –ù–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Ä—è–¥–æ–º —É–∂–µ —Å—Ç–æ—è—Ç $ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É–∂–µ —Ñ–æ—Ä–º—É–ª–∞)
        const before = whole.slice(Math.max(0, offset - 1), offset);
        const after = whole.slice(offset + match.length, offset + match.length + 1);
        if (before === '$' || after === '$') return match;

        // –ü—Ä–∏–∑–Ω–∞–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫
        const looksLikeMath = /_[{]?\d+|\\{1,2}(ldots|sum|frac)|\^[{]?\d+/.test(inner) || /[a-zA-Z]\s*[+\-]/.test(inner);
        if (!looksLikeMath) return match;

        const normalized = inner
            .replace(/\\{2,}([A-Za-z])/g, '\\$1')
            .replace(/\^(\d+)/g, '^{$1}')
            .replace(/¬∑/g, '\\cdot')
            .replace(/\|/g, ' \\mid ');
        return `$(${normalized})$`;
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline —Ñ–æ—Ä–º—É–ª—ã
    processedContent = processedContent.replace(/(?<!\$)\$([^$\n]+)\$(?!\$)/g, (match, formula) => {
        return renderLatexFormulaSync(formula, false);
    });

    return processedContent;
};

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ KaTeX
 * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å LaTeX —Ñ–æ—Ä–º—É–ª–∞–º–∏
 * @returns Promise —Å HTML —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
 */
export const processLatexInContentAsync = async (content: string): Promise<string> => {
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —Å–∞–Ω–∞—Ü–∏—è + –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∏–º–∏—Ç–µ—Ä–æ–≤ —Ç–∞–º, –≥–¥–µ –∏—Ö –Ω–µ—Ç
    let processedContent = normalizeLatexMarkers(basicMathSanitize(content));

    // –ù–∞–π–¥–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
    const blockFormulas = Array.from(processedContent.matchAll(/\$\$([^$]+)\$\$/g));
    const inlineFormulas = Array.from(processedContent.matchAll(/(?<!\$)\$([^$\n]+)\$(?!\$)/g));

    console.log(`üéØ Processing ${blockFormulas.length} block formulas and ${inlineFormulas.length} inline formulas`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    for (const match of blockFormulas) {
        try {
            const rendered = await renderLatexFormula(match[1], true);
            processedContent = processedContent.replace(match[0], rendered);
            console.log(`‚úÖ Processed block formula: ${match[1].substring(0, 30)}...`);
        } catch (error) {
            console.warn(`‚ùå Failed to process block formula: ${match[1]}`, error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
            const fallback = renderLatexFormulaSync(match[1], true);
            processedContent = processedContent.replace(match[0], fallback);
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline —Ñ–æ—Ä–º—É–ª—ã
    for (const match of inlineFormulas) {
        try {
            const rendered = await renderLatexFormula(match[1], false);
            processedContent = processedContent.replace(match[0], rendered);
            console.log(`‚úÖ Processed inline formula: ${match[1].substring(0, 30)}...`);
        } catch (error) {
            console.warn(`‚ùå Failed to process inline formula: ${match[1]}`, error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
            const fallback = renderLatexFormulaSync(match[1], false);
            processedContent = processedContent.replace(match[0], fallback);
        }
    }

    return processedContent;
};

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã KaTeX
 * @param testFormula - —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
 */
export const testKaTeXRendering = async (testFormula: string = 'm_{a}^{2} + m_{b}^{2} + m_{c}^{2} = \\frac{3}{4} S'): Promise<{
    original: string;
    blockResult: string;
    inlineResult: string;
    syncBlockResult: string;
    syncInlineResult: string;
}> => {
    console.log('üß™ Testing KaTeX rendering with formula:', testFormula);

    const blockResult = await renderLatexFormula(testFormula, true);
    const inlineResult = await renderLatexFormula(testFormula, false);
    const syncBlockResult = renderLatexFormulaSync(testFormula, true);
    const syncInlineResult = renderLatexFormulaSync(testFormula, false);

    console.log('üìä Test results:');
    console.log('Block (async):', blockResult.substring(0, 100) + '...');
    console.log('Inline (async):', inlineResult.substring(0, 100) + '...');
    console.log('Block (sync):', syncBlockResult.substring(0, 100) + '...');
    console.log('Inline (sync):', syncInlineResult.substring(0, 100) + '...');

    return {
        original: testFormula,
        blockResult,
        inlineResult,
        syncBlockResult,
        syncInlineResult
    };
};

/**
 * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –¥–µ–ª–∏–º–∏—Ç–µ—Ä—ã $...$ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è
 * —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ LaTeX-–º–∞–∫—Ä–æ—Å—ã.
 */
function normalizeLatexMarkers(input: string): string {
    let text = input;

    // –†—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ‚Üí LaTeX
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–ª–µ–µ —Å—Ä–∞–∑—É –∏–¥—ë—Ç —Å–∫–æ–±–∫–∞ ( ( –∏–ª–∏ [ )
    text = text
        .replace(/\barctg\s*(?=\(|\[)/gi, '\\arctan')
        .replace(/\btg\s*(?=\(|\[)/gi, '\\tan')
        .replace(/\bctg\s*(?=\(|\[)/gi, '\\cot')
        .replace(/\bsh\s*(?=\(|\[)/gi, '\\sinh')
        .replace(/\bch\s*(?=\(|\[)/gi, '\\cosh')
        .replace(/\bth\s*(?=\(|\[)/gi, '\\tanh')
        .replace(/\blg\s*(?=\(|\[)/gi, '\\log')
        .replace(/\bln\s*(?=\(|\[)/gi, '\\ln');

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∞ \func[ ... ] ‚Üí $\func\left[ ... \right]$
    text = text.replace(/(?<!\$)(\\(?:tan|cot|arctan|arcsin|arccos|sinh|cosh|tanh|sin|cos|log|ln))\s*\[([^\]\n]+)\](?!\$)/gi,
        (_m, fn, inner) => `$\\${fn}\\left[${inner}\\right]$`);

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∫—Ä—É–≥–ª–æ–π —Å–∫–æ–±–∫–æ–π: sin(x) ‚Üí $\sin(x)$ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–±—ë—Ä–Ω—É—Ç–æ)
    text = text.replace(/(?<!\$)\b(sin|cos|tan|cot|arctan|arcsin|arccos|sinh|cosh|tanh|log|ln)\s*\(([^()\n]+)\)(?!\$)/gi,
        (_m, fn, inner) => `$\\${fn}(${inner})$`);

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ LaTeX-–º–∞–∫—Ä–æ—Å—ã –±–µ–∑ –¥–µ–ª–∏–º–∏—Ç–µ—Ä–æ–≤
    // \frac{...}{...}
    text = text.replace(/(?<!\$)(\\frac\{[^}]+\}\{[^}]+\})(?!\$)/g, '$$$1$');
    // \sqrt{...}
    text = text.replace(/(?<!\$)(\\sqrt\{[^}]+\})(?!\$)/g, '$$$1$');
    // –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –±–∞–∑–æ–≤—ã–µ –º–∞–∫—Ä–æ—Å—ã –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∫ inline, –µ—Å–ª–∏ —Ä—è–¥–æ–º –±—É–∫–≤—ã/—Å–∫–æ–±–∫–∏
    text = text.replace(/(?<!\$)(\\(?:alpha|beta|gamma|delta|epsilon|pi|sigma|theta|omega|mu|lambda|phi))(?![a-zA-Z])(?!\$)/g, '$$$1$');

    // –ü—Ä–æ—Å—Ç–∞—è –¥—Ä–æ–±—å –≤–∏–¥–∞ ( ... ) / ( ... ) ‚Üí $$\frac{...}{...}$$
    text = text.replace(/\(\s*([^()]+?)\s*\)\s*\/\s*\(\s*([^()]+?)\s*\)/g, (_m, a, b) => `$$\\frac{${a}}{${b}}$$`);

    // Plain tan[...] ‚Üí $\\tan\\left[...\\right]$
    text = text.replace(/(?<!\$)\b(tan|cot)\s*\[([^\]\n]+)\](?!\$)/gi,
        (_m, fn, inner) => `$\\${fn.toLowerCase()}\\left[${inner}\\right]$`);

    // –ü–æ–ª–æ–≤–∏–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ tan[ 1 2 (X) ] ‚Üí $\\tan\\left[\\tfrac{1}{2}(X)\\right]$
    text = text.replace(/\\tan\\left\[\s*1\s+2\s*(\([^\)]+\))\s*\]/gi,
        (_m, p1) => `$\\tan\\left[\\tfrac{1}{2}${p1}\\right]$`);

    // –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ ¬´1 2 2 1¬ª ‚Üí ¬´1 2¬ª –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º ¬´1 2 (X)¬ª ‚Üí \tfrac{1}{2}(X)
    text = text.replace(/\b1\s*2\s*2\s*1\b/g, '1 2');
    text = text.replace(/\b1\s*2\b(?=\s*\()/g, '\\tfrac{1}{2}');

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–æ—Ä–º—É–ª, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ–¥—Ä—è–¥
    text = text.replace(/(\$\$[^$]+\$\$)\s*\1/g, '$1');
    text = text.replace(/(?<!\$)(\$[^$]+\$)\s*\1(?!\$)/g, '$1');

    return text;
}

/**
 * –ë–∞–∑–æ–≤–∞—è —Å–∞–Ω–∞—Ü–∏—è –º—É—Å–æ—Ä–∞ MathML/HTML –∏ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è math-—é–Ω–∏–∫–æ–¥–∞
 */
function basicMathSanitize(input: string): string {
    let s = input;
    // –£–¥–∞–ª—è–µ–º zero-width/—Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ NBSP
    s = s.replace(/[\u200B-\u200D\u2060\u2061\uFEFF\u00A0]/g, ' ');

    // –£–¥–∞–ª—è–µ–º annotation/x-application-tex —Ö–≤–æ—Å—Ç—ã
    s = s.replace(/<annotation[\s\S]*?<\/annotation>/gi, '')
         .replace(/application[^a-zA-Z]*x?[^a-zA-Z]*tex/gi, '');

    // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ HTML/MathML —Ç–µ–≥–∏
    s = s.replace(/<[^>]*>/g, ' ');

    // –£–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç—ã W3C/MathML
    s = s.replace(/https?:\/\/\s*w\s*3\s*\.\s*o\s*r\s*g\s*\/\s*1998\s*\/\s*Math\s*\/\s*MathML/gi, '')
         .replace(/\bw\s*3\s*\.\s*o\s*r\s*g\b/gi, '')
         .replace(/\b1998\s*org\s*\/?/gi, '')
         .replace(/\borg\s*1998\b/gi, '')
         .replace(/\b1998\s*\/\s*Math\s*\/\s*MathML\b/gi, '')
         .replace(/MathMLMath/gi, '')
         .replace(/\bMathML\b/gi, '');

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª—Ñ–∞–≤–∏—Ç—ã –≤ ASCII
    s = normalizeMathAlphanumerics(s);

    // –°–∫–ª–µ–∏–≤–∞–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–∞ (a p p l i c a t i o n ‚Üí application)
    s = s.replace(/\b([A-Za-z])(?:\s+[A-Za-z])+\b/g, (m) => m.replace(/\s+/g, ''));

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    s = s.replace(/\s+/g, ' ').trim();
    return s;
}

function normalizeMathAlphanumerics(str: string): string {
    let out = '';
    for (let i = 0; i < str.length; ) {
        const cp = str.codePointAt(i)!;
        const ch = String.fromCodePoint(cp);
        let repl: string | null = null;

        if (cp >= 0x1D400 && cp <= 0x1D419) repl = String.fromCharCode(65 + (cp - 0x1D400)); // Bold A-Z
        else if (cp >= 0x1D41A && cp <= 0x1D433) repl = String.fromCharCode(97 + (cp - 0x1D41A)); // Bold a-z
        else if (cp >= 0x1D434 && cp <= 0x1D44D) repl = String.fromCharCode(65 + (cp - 0x1D434)); // Italic A-Z
        else if (cp >= 0x1D44E && cp <= 0x1D467) repl = String.fromCharCode(97 + (cp - 0x1D44E)); // Italic a-z
        else if (cp >= 0x1D468 && cp <= 0x1D481) repl = String.fromCharCode(65 + (cp - 0x1D468)); // Bold Italic A-Z
        else if (cp >= 0x1D482 && cp <= 0x1D49B) repl = String.fromCharCode(97 + (cp - 0x1D482)); // Bold Italic a-z
        else if (cp >= 0x1D7CE && cp <= 0x1D7D7) repl = String.fromCharCode(48 + (cp - 0x1D7CE)); // Bold digits 0‚Äì9
        else if (cp === 0x210E) repl = 'h'; // ‚Ñé ‚Üí h

        out += repl ?? ch;
        i += ch.length;
    }
    return out;
}
